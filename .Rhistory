# for(m in 1:nrow(dat6)){
#   if(dat6$runningMax[m] %in% c("1","2","3","4","5","6","7","8","9")){
#     dat6$runningMax[m] = gradeLevels[dat6$runningMax[m]]
#   }
# }
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-1, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
library(ggplot2)
library(zoo)
gradeLevels = c("M", "D", "VD", "S", "HS", "MVS", "VS", "HVS", "E1", "E2")
dat = read.csv("C:/Users/User/Desktop/RowanDurrant_Logbook.csv")
dat1 = dat[dat$Style %in% c("2nd &beta;", "2nd", "Lead RP", "Lead Î²"),]
for(i in 1:nrow(dat1)){
dat1$GradeSplit[i] = strsplit(dat1$Grade[i], " ")[[1]][1]
}
dat1 = dat1[dat1$GradeSplit %in% gradeLevels,]
dat1$GradeSplit = factor(dat1$GradeSplit, levels = gradeLevels)
dat1$Date = as.Date(dat1$Date, format = "%d/%b/%y")
for(k in 1:nrow(dat1)){
if(dat1$Style[k] == "2nd &beta;" ||dat1$Style[k] ==  "2nd"){
dat1$AscentStyle[k] = "Second"
} else{dat1$AscentStyle[k] = "Lead"}
}
#Second
dat2 = dat1[dat1$AscentStyle == "Second",c(6,8,9)]
dat3 = data.frame(Date = seq.Date(
from = min(dat2$Date),
to = max(dat2$Date),
by = "day"
), GradeSplit = "M", AscentStyle = "Second")
dat2 = rbind(dat2, dat3)
dat2 = dat2[order(as.Date(dat2$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat2)){
if(which(dat2$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat2$GradeSplit[j]
}
dat2$runningMax[j] = as.factor(runningMax)
}
#Lead
dat4 = dat1[dat1$AscentStyle == "Lead",c(6,8,9)]
dat5 = data.frame(Date = seq.Date(
from = min(dat4$Date),
to = max(dat4$Date),
by = "day"
), GradeSplit = "M", AscentStyle = "Lead")
dat4 = rbind(dat4, dat5)
dat4 = dat4[order(as.Date(dat4$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat4)){
if(which(dat4$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat4$GradeSplit[j]
}
dat4$runningMax[j] = as.factor(runningMax)
}
dat6 = rbind(dat2, dat4)
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-1, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
library(ggplot2)
library(zoo)
gradeLevels = c("M", "D", "VD", "S", "HS", "MVS", "VS", "HVS", "E1", "E2")
dat = read.csv("C:/Users/User/Desktop/RowanDurrant_Logbook.csv")
dat1 = dat[dat$Style %in% c("2nd &beta;", "2nd", "Lead RP", "Lead Î²"),]
for(i in 1:nrow(dat1)){
dat1$GradeSplit[i] = strsplit(dat1$Grade[i], " ")[[1]][1]
}
dat1 = dat1[dat1$GradeSplit %in% gradeLevels,]
dat1$GradeSplit = factor(dat1$GradeSplit, levels = gradeLevels)
dat1$Date = as.Date(dat1$Date, format = "%d/%b/%y")
for(k in 1:nrow(dat1)){
if(dat1$Style[k] == "2nd &beta;" ||dat1$Style[k] ==  "2nd"){
dat1$AscentStyle[k] = "Second"
} else{dat1$AscentStyle[k] = "Lead"}
}
#Second
dat2 = dat1[dat1$AscentStyle == "Second",c(6,8,9)]
dat3 = data.frame(Date = seq.Date(
from = min(dat2$Date),
to = Sys.Date(),
by = "day"
), GradeSplit = "M", AscentStyle = "Second")
dat2 = rbind(dat2, dat3)
dat2 = dat2[order(as.Date(dat2$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat2)){
if(which(dat2$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat2$GradeSplit[j]
}
dat2$runningMax[j] = as.factor(runningMax)
}
#Lead
dat4 = dat1[dat1$AscentStyle == "Lead",c(6,8,9)]
dat5 = data.frame(Date = seq.Date(
from = min(dat4$Date),
to = Sys.Date(),
by = "day"
), GradeSplit = "M", AscentStyle = "Lead")
dat4 = rbind(dat4, dat5)
dat4 = dat4[order(as.Date(dat4$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat4)){
if(which(dat4$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat4$GradeSplit[j]
}
dat4$runningMax[j] = as.factor(runningMax)
}
dat6 = rbind(dat2, dat4)
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-1, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
gradeLevels = c("M", "D", "HVD", "VD", "S", "HS", "MVS", "VS", "HVS", "E1", "E2",
"E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10")
length(gradeLevels)
library(ggplot2)
library(zoo)
gradeLevels = c("M", "D", "HVD", "VD", "S", "HS", "MVS", "VS", "HVS", "E1", "E2",
"E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10")
dat = read.csv("C:/Users/User/Desktop/R Projects/UKC data/RowanDurrant_Logbook.csv")
dat1 = dat[dat$Style %in% c("2nd &beta;", "2nd", "Lead RP", "Lead Î²"),]
for(i in 1:nrow(dat1)){
dat1$GradeSplit[i] = strsplit(dat1$Grade[i], " ")[[1]][1]
}
dat1 = dat1[dat1$GradeSplit %in% gradeLevels,]
dat1$GradeSplit = factor(dat1$GradeSplit, levels = gradeLevels)
dat1$Date = as.Date(dat1$Date, format = "%d/%b/%y")
for(k in 1:nrow(dat1)){
if(dat1$Style[k] == "2nd &beta;" ||dat1$Style[k] ==  "2nd"){
dat1$AscentStyle[k] = "Second"
} else{dat1$AscentStyle[k] = "Lead"}
}
#Second
dat2 = dat1[dat1$AscentStyle == "Second",c(6,8,9)]
dat3 = data.frame(Date = seq.Date(
from = min(dat2$Date),
to = Sys.Date(),
by = "day"
), GradeSplit = "M", AscentStyle = "Second")
dat2 = rbind(dat2, dat3)
dat2 = dat2[order(as.Date(dat2$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat2)){
if(which(dat2$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat2$GradeSplit[j]
}
dat2$runningMax[j] = as.factor(runningMax)
}
#Lead
dat4 = dat1[dat1$AscentStyle == "Lead",c(6,8,9)]
dat5 = data.frame(Date = seq.Date(
from = min(dat4$Date),
to = Sys.Date(),
by = "day"
), GradeSplit = "M", AscentStyle = "Lead")
dat4 = rbind(dat4, dat5)
dat4 = dat4[order(as.Date(dat4$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat4)){
if(which(dat4$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat4$GradeSplit[j]
}
dat4$runningMax[j] = as.factor(runningMax)
}
dat6 = rbind(dat2, dat4)
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-1, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-2, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
?rpois
library(devtools)
devtools::install_github("kathryncampbell/MADDOG", build_vignettes = TRUE, force = TRUE)
1= c(1,1,1,1,1,)
`1` = c(1,1,1,1,1,)
`1` = c(0,0,0,0,0,0,0,0,0,0)
df = data.frame(c(`1`, `2`, `3`))
`2` = c(0,0,0,0,0,0,0,0,0,0)
`3` = c(0,0,0,0,0,0,0,0,0,0)
df = data.frame(c(`1`, `2`, `3`))
print(df)
A = c(0,0,0,0,0,0,0,0,0,0)
B = c(0,0,0,0,0,0,0,0,0,0)
C = c(0,0,0,0,0,0,0,0,0,0)
df = data.frame(c(A,B,C))
print(df)
df
?data.frame
df = as.data.frame(rbind(c(A,B,C)))
df
df = as.data.frame(rbind(A,B,C))
df
A = c(0,0,0,0,0,0,0,0,0)
B = c(0,0,0,0,0,0,0,0,0)
C = c(0,0,0,0,0,0,0,0,0)
D = c(0,0,0,0,0,0,0,0,0)
E = c(0,0,0,0,0,0,0,0,0)
F = c(0,0,0,0,0,0,0,0,0)
G = c(0,0,0,0,0,0,0,0,0)
H = c(0,0,0,0,0,0,0,0,0)
I = c(0,0,0,0,0,0,0,0,0)
df = as.data.frame(rbind(A,B,C,D,E,F,G,H,I))
DF
df
clockrate = c(7.96E-04,
1.08E-04,
3.35E-05,
6.37E-05,
4.41E-04,
1.55E-04,
1.53E-04,
1.47E-04,
5.75E-04,
5.91E-05)
snpsPerGen = c(0.327,
0.126,
0.040,
0.111,
0.523,
0.178,
0.106,
0.138,
0.696,
0.081)
serialInterval = c(12.5,
35.56,
36,
53.17,
36.13,
35,
21,
28.54,
36.82,
41.62)
GSNPs = c(28,
10.5,
3.5,
8,
0,
9,
7,
4.33333,
54,
111)
plot(GSNPs ~ serialInterval)
plot(serialInterval ~ GSNPs)
plot(snpsPerGen ~ GSNPs)
plot(clockrate ~ GSNPs)
devtools::install_github("kathryncampbell/MADDOG", build_vignettes = TRUE, force = TRUE)
period = c(23, 845, 23, 1, 34, 9)
units = c("Day", "Day", "Day", "Month", "Day", "Week")
# We convert all values to days, including incertainty
period_units = rep(NA, length(units))
day = grep("Day", units) # which ones are in days
week = grep("Week", units)
month = grep("Month", units)
period_units[day] <- 1 # i.e. one day units
period_units[week] <- 7 # i.e. 7 days = 1 week
period_units[month] <- 30 # i.e. 30 days = 1 month
P1 <- period * period_units # Period, directly from periods
date.start = c("23/12/2020", "03/12/2021", "23/12/2020", "03/12/2021", "23/12/2020", "03/12/2021")
date.end = rep(NA, 6)
start.uncertainty = rep(0, 6)
end.uncertainty = rep(0,6)
# We convert all values to days, including incertainty
period_units = rep(NA, length(units))
day = grep("Day", units) # which ones are in days
week = grep("Week", units)
month = grep("Month", units)
period_units[day] <- 1 # i.e. one day units
period_units[week] <- 7 # i.e. 7 days = 1 week
period_units[month] <- 30 # i.e. 30 days = 1 month
P1 <- period * period_units # Period, directly from periods
# Use the start and end dates, i.e. interval, to compute the period
# Simulate start and end dates, incorporating uncertainties
start_uncertainty = rep(NA, length(date.start))
Suc0 = grep("0", start.uncertainty) # Suc1 = startUncertainty => which ones are +/- 1 week?
Suc1 = grep("+/- 7 days", start.uncertainty) # Suc1 = startUncertainty => which ones are +/- 1 week?
Suc2 = grep("+/- 14 days", start.uncertainty)
Suc3 = grep("+/- 28 days", start.uncertainty)
start_uncertainty[Suc0] <- 0
start_uncertainty[Suc1] <- 7
start_uncertainty[Suc2] <- 14
start_uncertainty[Suc3] <- 28
# Add random +/- to dates
date.start[Suc1] = date.start[Suc1]+(runif(length(Suc1), -4, +4))   # +/- 7 days = early, late or mid in raw data
date.start[Suc2] = date.start[Suc2]+(runif(length(Suc2), -10, +10)) # +/- 14 days (only in new data)
end.uncertainty = rep("0",6)
start.uncertainty = rep("0",6)
Suc0 = grep("0", start.uncertainty) # Suc1 = startUncertainty => which ones are +/- 1 week?
Suc1 = grep("+/- 7 days", start.uncertainty) # Suc1 = startUncertainty => which ones are +/- 1 week?
Suc2 = grep("+/- 14 days", start.uncertainty)
Suc3 = grep("+/- 28 days", start.uncertainty)
start_uncertainty[Suc0] <- 0
start_uncertainty[Suc1] <- 7
start_uncertainty[Suc2] <- 14
start_uncertainty[Suc3] <- 28
# Add random +/- to dates
date.start[Suc1] = date.start[Suc1]+(runif(length(Suc1), -4, +4))   # +/- 7 days = early, late or mid in raw data
date.start[Suc2] = date.start[Suc2]+(runif(length(Suc2), -10, +10)) # +/- 14 days (only in new data)
date.start[Suc3] = date.start[Suc3]+(runif(length(Suc3), -20, +20)) # +/- 28 days = "in" the month
Suc1
end_uncertainty = rep(NA, length(date.end))
Euc0 = grep("0", end.uncertainty)
Euc1 = grep("+/- 7 days", end.uncertainty)
Euc2 = grep("+/- 14 days", end.uncertainty)
Euc3 = grep("+/- 28 days", end.uncertainty)
end_uncertainty[Euc0] <- 0
end_uncertainty[Euc1] <- 7
end_uncertainty[Euc2] <- 14
end_uncertainty[Euc3] <- 28
# Add random +/- to dates
date.end[Euc1] = date.end[Euc1]+(runif(length(Euc1), -4, +4))   # +/- 7 days = early, late or mid in raw data
date.end[Euc2] = date.end[Euc2]+(runif(length(Euc2), -10, +10)) # +/- 14 days (only in new data)
date.end[Euc3] = date.end[Euc3]+(runif(length(Euc3), -20, +20)) # +/- 28 days = "in" the month
# Find the maximum level of uncertainty in the dates, and compute period from the dates
date_uncertainty <- pmax(start_uncertainty, end_uncertainty, na.rm = T)
P2 = as.numeric(date.end - date.start) # Period from the interval (dates)
library(ape)
?dist.dna
?rpois
dpois(1, 0.17)
dpois(0, 0.17)
dpois(54, 0.17)
seq1 = "AAAAAAAAAAAAAAAAAAAAAAAAAA"
seq2 = "AAACAAAAAAAAAAAAAAAAAAAAAG"
seqs = as.DNAbin(list(seq1, seq2))
SNPs_gen = 0.17
prob_related_SNPs = function(seqs, SNPs_gen){
#seqs must be class "DNAbin"
SNP_diff = dist.dna(seqs, model = "N", pairwise.deletion = T)
related_prob = dpois(SNP_diff, SNPs_gen)
return(related_prob)
}
prob_related_SNPs(seqs, SNPs_gen)
dist.dna(seqs, model = "N", pairwise.deletion = T)
View(seqs)
?as.DNAbin
list(seq1, seq2)
setwd("C:/Users/User/Documents/GitHub/GWAS")
seqs = read.FASTA(file = "some sequences.fasta")
seqs = seqs[1:2,]
seqs = seqs[[1:2]]
seqs = read.FASTA(file = "some sequences.fasta")
seqs = as.DNAbin(seqs)
seqs = read.FASTA(file = "some sequences.fasta")
seqs<-as.character(seqs)
seqs2<-seqs[c('MR006 AF1b_A1','KY210266 A1.2.2'),]
seqs = read.FASTA(file = "some sequences.fasta", type = "AA")
seqs<-as.character(seqs)
seqs2<-seqs[rownames(seqs) %in% c('MR006 AF1b_A1','KY210266 A1.2.2'),]
seqs2<-seqs[c('MR006 AF1b_A1','KY210266 A1.2.2')]
seqs2<-as.DNAbin(seqs2)
prob_related_SNPs = function(seqs2, SNPs_gen){
#seqs must be class "DNAbin"
SNP_diff = dist.dna(seqs, model = "N", pairwise.deletion = T)
related_prob = dpois(SNP_diff, SNPs_gen)
return(related_prob)
}
prob_related_SNPs(seqs, SNPs_gen)
seqs = read.FASTA(file = "some sequences.fasta")
seqs<-as.character(seqs)
seqs2<-seqs[c('MR006 AF1b_A1','KY210266 A1.2.2')]
seqs2<-as.DNAbin(seqs2)
SNPs_gen = 0.17
prob_related_SNPs = function(seqs2, SNPs_gen){
#seqs must be class "DNAbin"
SNP_diff = dist.dna(seqs, model = "N", pairwise.deletion = T)
related_prob = dpois(SNP_diff, SNPs_gen)
return(related_prob)
}
prob_related_SNPs(seqs, SNPs_gen)
seqs2<-seqs[c('KY210223 A1.2.2','KY210266 A1.2.2')]
seqs2<-as.DNAbin(seqs2)
SNPs_gen = 0.17
prob_related_SNPs = function(seqs2, SNPs_gen){
#seqs must be class "DNAbin"
SNP_diff = dist.dna(seqs, model = "N", pairwise.deletion = T)
related_prob = dpois(SNP_diff, SNPs_gen)
return(related_prob)
}
prob_related_SNPs(seqs, SNPs_gen)
seqs2<-as.DNAbin(seqs2)
prob_related_SNPs(seqs, SNPs_gen)
seqs = read.FASTA(file = "example.fasta")
seqs2<-seqs[c('seq1','seq2')]
SNPs_gen = 0.17
prob_related_SNPs = function(seqs2, SNPs_gen){
#seqs must be class "DNAbin"
SNP_diff = dist.dna(seqs, model = "N", pairwise.deletion = T)
related_prob = dpois(SNP_diff, SNPs_gen)
return(related_prob)
}
prob_related_SNPs(seqs, SNPs_gen)
#seqs must be class "DNAbin"
SNP_diff = dist.dna(seqs, model = "N", pairwise.deletion = T)
prob_related_SNPs = function(seqs, SNPs_gen){
#seqs must be class "DNAbin"
SNP_diff = dist.dna(seqs, model = "N", pairwise.deletion = T)
related_prob = dpois(SNP_diff, SNPs_gen)
return(related_prob)
}
prob_related_SNPs(seqs2, SNPs_gen)
prob_related_SNPs = function(seqs, SNPs_gen){
#seqs must be class "DNAbin"
SNP_diff = dist.dna(seqs, model = "N", pairwise.deletion = T)
related_prob = dpois(SNP_diff, SNPs_gen)
return(related_prob)
}
#seqs must be class "DNAbin"
SNP_diff = dist.dna(seqs, model = "N", pairwise.deletion = T)
related_prob = dpois(SNP_diff, SNPs_gen)
unlist(related_prob)
unname(related_prob)
as.numeric(related_prob)
return(as.numeric(related_prob))
prob_related_SNPs = function(seqs, SNPs_gen){
#seqs must be class "DNAbin"
SNP_diff = dist.dna(seqs, model = "N", pairwise.deletion = T)
related_prob = dpois(SNP_diff, SNPs_gen)
return(as.numeric(related_prob))
}
prob_related_SNPs(seqs2, SNPs_gen)
snp_diff = 226
years = 8
clock_rate = 2 * 10^-4
genome_length = 11925
clock_rate*years*genome_length
clock_rate = 5 * 10^-4
genome_length = 11925
clock_rate*years*genome_length
clock_rate*years*2*genome_length
clock_rate = 1 * 10^-3
genome_length = 11925
clock_rate*years*2*genome_length
days = years * 365.25
gens = days / 28
gens*2*0.17
clock_posterior = fread("../Lineage_SNP_investigations/BEAST/AF1b_B1.1.1/AF1b_B1.1.1_aligned_GTRFIG4_unrelog_coalcon.log", select = "meanRate")$meanRate
library(data.table)
clock_posterior = fread("../Lineage_SNP_investigations/BEAST/AF1b_B1.1.1/AF1b_B1.1.1_aligned_GTRFIG4_unrelog_coalcon.log", select = "meanRate")$meanRate
clock_posterior = clock_posterior[100:length(clock_posterior)]
setwd("C:/Users/User/Documents/GitHub/Rabies-Mutation")
library("plotrix")
set.seed(27354)
##Jonathan's function
logPost <- function(dat, psamps){
d <- log(dat)
sig <- sd(d)
mu <- mean(d)
n <- length(d)
musamp <- rnorm(psamps, mu, sig/sqrt(n))
sigsamp <- sig*rchisq(psamps, n)/n
return(exp(musamp+sigsamp^2/2))
}
si <- fread("input/serial_interval_clean_RD.csv", select = "x")$x
SI_posterior = logPost(si, 124299)
par(mfrow = c(1,2))
hist(SI_posterior)
hist(clock_posterior)
SI_posterior = logPost(si, length(clock_posterior))
par(mfrow = c(1,2))
hist(SI_posterior)
hist(clock_posterior)
###redo this you don't need to multiply all of them togther lol
multiplied_posteriors = SI_posterior*clock_posterior*11923/365
quantile(multiplied_posteriors, c(.025, .975))
mean(multiplied_posteriors)
clock_posterior = fread("../Lineage_SNP_investigations/BEAST/AF1b_A1/AF1b_A1_aligned_GTRFI_unrelog_coalcon.log", select = "meanRate")$meanRate
clock_posterior = clock_posterior[100:length(clock_posterior)]
si <- fread("input/serial_interval_clean_RD.csv", select = "x")$x
SI_posterior = logPost(si, length(clock_posterior))
par(mfrow = c(1,2))
hist(SI_posterior)
hist(clock_posterior)
###redo this you don't need to multiply all of them togther lol
multiplied_posteriors = SI_posterior*clock_posterior*11923/365
quantile(multiplied_posteriors, c(.025, .975))
mean(multiplied_posteriors)
clock_posterior = fread("../Lineage_SNP_investigations/BEAST/AF1b_B1.3/AF1b_B1.3_aligned_GTRFIG4_unrelog_coalcon.log", select = "meanRate")$meanRate
clock_posterior = clock_posterior[100:length(clock_posterior)]
si <- fread("input/serial_interval_clean_RD.csv", select = "x")$x
SI_posterior = logPost(si, length(clock_posterior))
par(mfrow = c(1,2))
hist(SI_posterior)
hist(clock_posterior)
###redo this you don't need to multiply all of them togther lol
multiplied_posteriors = SI_posterior*clock_posterior*11923/365
quantile(multiplied_posteriors, c(.025, .975))
mean(multiplied_posteriors)
