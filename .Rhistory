dat1$GradeSplit = factor(dat1$GradeSplit, levels = gradeLevels)
dat1$Date = as.Date(dat1$Date, format = "%d/%b/%y")
for(k in 1:nrow(dat1)){
if(dat1$Style[k] == "2nd &beta;" ||dat1$Style[k] ==  "2nd"){
dat1$AscentStyle[k] = "Second"
} else{dat1$AscentStyle[k] = "Lead"}
}
#Second
dat2 = dat1[dat1$AscentStyle == "Second",c(6,8,9)]
dat3 = data.frame(Date = seq.Date(
from = min(dat1$Date),
to = max(dat1$Date),
by = "day"
), GradeSplit = "M", AscentStyle = "Second")
dat2 = rbind(dat2, dat3)
dat2 = dat2[order(as.Date(dat2$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat2)){
if(which(dat2$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat2$GradeSplit[j]
}
dat2$runningMax[j] = as.factor(runningMax-1)
}
#Lead
dat4 = dat1[dat1$AscentStyle == "Lead",c(6,8,9)]
dat5 = data.frame(Date = seq.Date(
from = min(dat1$Date),
to = max(dat1$Date),
by = "day"
), GradeSplit = "M", AscentStyle = "Lead")
dat4 = rbind(dat4, dat5)
dat4 = dat4[order(as.Date(dat4$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat4)){
if(which(dat4$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat4$GradeSplit[j]
}
dat4$runningMax[j] = as.factor(runningMax-1)
}
dat6 = rbind(dat2, dat4)
# for(m in 1:nrow(dat6)){
#   if(dat6$runningMax[m] %in% c("1","2","3","4","5","6","7","8","9")){
#     dat6$runningMax[m] = gradeLevels[dat6$runningMax[m]]
#   }
# }
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-1, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
library(ggplot2)
library(zoo)
gradeLevels = c("M", "D", "VD", "S", "HS", "MVS", "VS", "HVS", "E1", "E2")
dat = read.csv("C:/Users/User/Desktop/RowanDurrant_Logbook.csv")
dat1 = dat[dat$Style %in% c("2nd &beta;", "2nd", "Lead RP", "Lead Î²"),]
for(i in 1:nrow(dat1)){
dat1$GradeSplit[i] = strsplit(dat1$Grade[i], " ")[[1]][1]
}
dat1 = dat1[dat1$GradeSplit %in% gradeLevels,]
dat1$GradeSplit = factor(dat1$GradeSplit, levels = gradeLevels)
dat1$Date = as.Date(dat1$Date, format = "%d/%b/%y")
for(k in 1:nrow(dat1)){
if(dat1$Style[k] == "2nd &beta;" ||dat1$Style[k] ==  "2nd"){
dat1$AscentStyle[k] = "Second"
} else{dat1$AscentStyle[k] = "Lead"}
}
#Second
dat2 = dat1[dat1$AscentStyle == "Second",c(6,8,9)]
dat3 = data.frame(Date = seq.Date(
from = min(dat2$Date),
to = max(dat2$Date),
by = "day"
), GradeSplit = "M", AscentStyle = "Second")
dat2 = rbind(dat2, dat3)
dat2 = dat2[order(as.Date(dat2$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat2)){
if(which(dat2$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat2$GradeSplit[j]
}
dat2$runningMax[j] = as.factor(runningMax)
}
#Lead
dat4 = dat1[dat1$AscentStyle == "Lead",c(6,8,9)]
dat5 = data.frame(Date = seq.Date(
from = min(dat4$Date),
to = max(dat4$Date),
by = "day"
), GradeSplit = "M", AscentStyle = "Lead")
dat4 = rbind(dat4, dat5)
dat4 = dat4[order(as.Date(dat4$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat4)){
if(which(dat4$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat4$GradeSplit[j]
}
dat4$runningMax[j] = as.factor(runningMax)
}
dat6 = rbind(dat2, dat4)
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-1, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
library(ggplot2)
library(zoo)
gradeLevels = c("M", "D", "VD", "S", "HS", "MVS", "VS", "HVS", "E1", "E2")
dat = read.csv("C:/Users/User/Desktop/RowanDurrant_Logbook.csv")
dat1 = dat[dat$Style %in% c("2nd &beta;", "2nd", "Lead RP", "Lead Î²"),]
for(i in 1:nrow(dat1)){
dat1$GradeSplit[i] = strsplit(dat1$Grade[i], " ")[[1]][1]
}
dat1 = dat1[dat1$GradeSplit %in% gradeLevels,]
dat1$GradeSplit = factor(dat1$GradeSplit, levels = gradeLevels)
dat1$Date = as.Date(dat1$Date, format = "%d/%b/%y")
for(k in 1:nrow(dat1)){
if(dat1$Style[k] == "2nd &beta;" ||dat1$Style[k] ==  "2nd"){
dat1$AscentStyle[k] = "Second"
} else{dat1$AscentStyle[k] = "Lead"}
}
#Second
dat2 = dat1[dat1$AscentStyle == "Second",c(6,8,9)]
dat3 = data.frame(Date = seq.Date(
from = min(dat2$Date),
to = Sys.Date(),
by = "day"
), GradeSplit = "M", AscentStyle = "Second")
dat2 = rbind(dat2, dat3)
dat2 = dat2[order(as.Date(dat2$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat2)){
if(which(dat2$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat2$GradeSplit[j]
}
dat2$runningMax[j] = as.factor(runningMax)
}
#Lead
dat4 = dat1[dat1$AscentStyle == "Lead",c(6,8,9)]
dat5 = data.frame(Date = seq.Date(
from = min(dat4$Date),
to = Sys.Date(),
by = "day"
), GradeSplit = "M", AscentStyle = "Lead")
dat4 = rbind(dat4, dat5)
dat4 = dat4[order(as.Date(dat4$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat4)){
if(which(dat4$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat4$GradeSplit[j]
}
dat4$runningMax[j] = as.factor(runningMax)
}
dat6 = rbind(dat2, dat4)
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-1, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
gradeLevels = c("M", "D", "HVD", "VD", "S", "HS", "MVS", "VS", "HVS", "E1", "E2",
"E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10")
length(gradeLevels)
library(ggplot2)
library(zoo)
gradeLevels = c("M", "D", "HVD", "VD", "S", "HS", "MVS", "VS", "HVS", "E1", "E2",
"E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10")
dat = read.csv("C:/Users/User/Desktop/R Projects/UKC data/RowanDurrant_Logbook.csv")
dat1 = dat[dat$Style %in% c("2nd &beta;", "2nd", "Lead RP", "Lead Î²"),]
for(i in 1:nrow(dat1)){
dat1$GradeSplit[i] = strsplit(dat1$Grade[i], " ")[[1]][1]
}
dat1 = dat1[dat1$GradeSplit %in% gradeLevels,]
dat1$GradeSplit = factor(dat1$GradeSplit, levels = gradeLevels)
dat1$Date = as.Date(dat1$Date, format = "%d/%b/%y")
for(k in 1:nrow(dat1)){
if(dat1$Style[k] == "2nd &beta;" ||dat1$Style[k] ==  "2nd"){
dat1$AscentStyle[k] = "Second"
} else{dat1$AscentStyle[k] = "Lead"}
}
#Second
dat2 = dat1[dat1$AscentStyle == "Second",c(6,8,9)]
dat3 = data.frame(Date = seq.Date(
from = min(dat2$Date),
to = Sys.Date(),
by = "day"
), GradeSplit = "M", AscentStyle = "Second")
dat2 = rbind(dat2, dat3)
dat2 = dat2[order(as.Date(dat2$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat2)){
if(which(dat2$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat2$GradeSplit[j]
}
dat2$runningMax[j] = as.factor(runningMax)
}
#Lead
dat4 = dat1[dat1$AscentStyle == "Lead",c(6,8,9)]
dat5 = data.frame(Date = seq.Date(
from = min(dat4$Date),
to = Sys.Date(),
by = "day"
), GradeSplit = "M", AscentStyle = "Lead")
dat4 = rbind(dat4, dat5)
dat4 = dat4[order(as.Date(dat4$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat4)){
if(which(dat4$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat4$GradeSplit[j]
}
dat4$runningMax[j] = as.factor(runningMax)
}
dat6 = rbind(dat2, dat4)
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-1, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-2, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
?rpois
library(devtools)
devtools::install_github("kathryncampbell/MADDOG", build_vignettes = TRUE, force = TRUE)
1= c(1,1,1,1,1,)
`1` = c(1,1,1,1,1,)
`1` = c(0,0,0,0,0,0,0,0,0,0)
df = data.frame(c(`1`, `2`, `3`))
`2` = c(0,0,0,0,0,0,0,0,0,0)
`3` = c(0,0,0,0,0,0,0,0,0,0)
df = data.frame(c(`1`, `2`, `3`))
print(df)
A = c(0,0,0,0,0,0,0,0,0,0)
B = c(0,0,0,0,0,0,0,0,0,0)
C = c(0,0,0,0,0,0,0,0,0,0)
df = data.frame(c(A,B,C))
print(df)
df
?data.frame
df = as.data.frame(rbind(c(A,B,C)))
df
df = as.data.frame(rbind(A,B,C))
df
A = c(0,0,0,0,0,0,0,0,0)
B = c(0,0,0,0,0,0,0,0,0)
C = c(0,0,0,0,0,0,0,0,0)
D = c(0,0,0,0,0,0,0,0,0)
E = c(0,0,0,0,0,0,0,0,0)
F = c(0,0,0,0,0,0,0,0,0)
G = c(0,0,0,0,0,0,0,0,0)
H = c(0,0,0,0,0,0,0,0,0)
I = c(0,0,0,0,0,0,0,0,0)
df = as.data.frame(rbind(A,B,C,D,E,F,G,H,I))
DF
df
clockrate = c(7.96E-04,
1.08E-04,
3.35E-05,
6.37E-05,
4.41E-04,
1.55E-04,
1.53E-04,
1.47E-04,
5.75E-04,
5.91E-05)
snpsPerGen = c(0.327,
0.126,
0.040,
0.111,
0.523,
0.178,
0.106,
0.138,
0.696,
0.081)
serialInterval = c(12.5,
35.56,
36,
53.17,
36.13,
35,
21,
28.54,
36.82,
41.62)
GSNPs = c(28,
10.5,
3.5,
8,
0,
9,
7,
4.33333,
54,
111)
plot(GSNPs ~ serialInterval)
plot(serialInterval ~ GSNPs)
plot(snpsPerGen ~ GSNPs)
plot(clockrate ~ GSNPs)
devtools::install_github("kathryncampbell/MADDOG", build_vignettes = TRUE, force = TRUE)
setwd("C:/Users/User/Documents/GitHub/Rabies-Mutation")
seeds = c(9,28,29,31,35)
SNPRates = c(0.2,0.5,1,2,5)
perBaseRates = SNPRates/12000
library(data.table)
trueSNPRate = c()
predictedSNPRate = c()
accuracy = c()
clockRate = c()
for(j in seeds){
for(i in perBaseRates){
trueSNPRate = append(trueSNPRate, i*12000)
clockRates = fread(file = paste0("output/simulation/tree building/simSequences",j,"_100_",i,"_strict.MCC.log"), select = "meanRate")$meanRate
clockRates = clockRates[100:length(clockRates)] #burn in
clockRate = append(clockRate, mean(clockRates))
SIs = rlnorm(length(clockRates), meanlog=2.96, sdlog=0.82)
multipliedPosteriors = clockRates*SIs*12000
predictedSNPRate = append(predictedSNPRate, mean(multipliedPosteriors))
}
}
accuracy = log(predictedSNPRate/trueSNPRate)
#accuracy = (100 * (predictedSNPRate - trueSNPRate))/trueSNPRate
df = as.data.frame(cbind(trueSNPRate, predictedSNPRate, accuracy))
Accuracy = df
library(ggplot2)
ggplot(Accuracy, aes(x = trueSNPRate, y = accuracy)) +
geom_point(colour = "palegreen4", shape = 16) +
ylim(-1, 1)+
geom_hline(yintercept = 0, linetype = "dotted")+
xlab("Equivalent Per-Generation Substitution Rate (SNPs/Generation)")+
ylab("Accuracy (natural log of the ratio)") +
theme_bw() + theme(legend.position = "none") +
coord_trans(x = "log")
ggsave("plots/Figure 5.png")
write.csv(df, file = "output/simulation/clockrate_method_accuracy.csv")
x = 1-
0
for(x in x){}
x = 10
for(x in x){print(x)}
mutation_distr = read.csv("output/pemba/multiplied_posteriors.csv")
mutation_distr = read.csv("output/pemba/multiplied_posteriors.csv")$x
library(fitdistrplus)
mutation_distr = read.csv("output/pemba/multiplied_posteriors.csv")$x
runs = rep(NA, 10)
snps_gamma = data.frame(shape = runs, rate = runs, aic = runs, LL = runs)
snps_lnorm = data.frame(meanlog = runs, sdlog = runs, aic = runs, LL = runs)
for (j in 1:length(runs)){ # for each run assign uncertainty to periods
# Fit distributions
snps_predict_gamma = fitdist(mutation_distr, "gamma")
snps_gamma$shape[j] = snps_predict_gamma$estimate["shape"]
snps_gamma$rate[j] = snps_predict_gamma$estimate["rate"]
snps_gamma$aic[j] = snps_predict_gamma$aic
snps_gamma$LL[j] = snps_predict_gamma$loglik
snps_predict_lnorm = fitdist(mutation_distr, "lnorm")
snps_lnorm$meanlog[j] = snps_predict_lnorm$estimate["meanlog"]
snps_lnorm$sdlog[j] = snps_predict_lnorm$estimate["sdlog"]
snps_lnorm$aic[j] = snps_predict_lnorm$aic
snps_lnorm$LL[j] = snps_predict_lnorm$loglik
print(j)
}
mean(snps_gamma$aic); mean(snps_lnorm$aic)
param <- MASS::fitdistr(mutation_distr, "lognormal", lower=c(0,0))
param
param <- MASS::fitdistr(mutation_distr, "gamma", lower=c(0,0))
param
library(tidyverse)
library(ggtree)
library(treeio)
library(ggmap)
library(grid)
tree = read.beast("../Pemba/data/genetic/pemba_tz_n153_timescaled.mcc.tre")
tipcolours = c()
for(i in 1:length(tree@phylo$tip.label)){
tipcolours[i] = strsplit(tree@phylo$tip.label[i], '[!?._][[:space:]]*')[[1]][3]
tree@phylo$tip.label[i] = strsplit(tree@phylo$tip.label[i], "_")[[1]][1]
}
d <- data.frame(node=1:(Nnode(tree)+length(tree@phylo$tip.label)),
location = c(tipcolours, rep("black", Nnode(tree))))
d2 <- data.frame(location = c("Dodoma", "Kibaha", "Kilombero",
"Morogoro", "Nachingwea", "Newala",
"Ngorongoro", "Pemba", "Same",
"Serengeti", "Tameke", "Ulanga"),
lat = c(-6.16321839449851, -6.78292087610276, -8.094573329844343,
-6.829822582806052, -10.331969188962217,-10.729783497624434,
-3.242787751353734,-5.214532107434417,-4.059036129939253,
-1.9078154430190237, -6.939700978622705, -8.907696367406384),
long = c(35.75237861054599, 38.99129390980104, 36.67142740598683,
37.65825142647812, 38.715948470886694, 39.29205406542055,
35.4939020975142,  39.77440205076576, 37.75980296830634,
34.753567137337896, 39.37371777456853, 36.824963731565475))
p = ggtree(tree, mrsd="2018-01-01") +
theme_tree2() +
#geom_tiplab(align=TRUE, linesize=.5, size = 3) +
xlim(1950, 2022)
p = p %<+% d  +
geom_tippoint(aes(color=location), size=3, alpha=1) +
scale_color_brewer("location", palette="Paired")
p
tanzania = get_stamenmap(bbox = c(left = 33, bottom = -11, right =
43, top = -1.5), zoom = 6, maptype = 'toner-lite')
p_tanzania = ggmap(tanzania) +
geom_point(data = d2, aes(x = long, y = lat, colour = location), size=4, alpha=1) +
scale_color_brewer("location", palette="Paired")+
theme(axis.title = element_blank(),
axis.text  = element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
# p +
#   inset(ggplotGrob(p_tanzania), xmin = 1950, xmax = 1995, ymin = 60, ymax = 150)
df = read.table("input/pemba non timescaled.txt", header = T)
clusters = read.csv("input/Pemba_assignment.csv")
df = df[df$tip %in% clusters$ID,]
plot(df$distance ~ df$date)
lm = lm(df$distance ~ df$date)
mysubtitle = paste("X intercept = ",(coef(lm)[1] * -1)/coef(lm)[2])
mtext(mysubtitle, side = 3, line = 0.25, cex = 0.65)
abline(lm)
df$lineage = NA
for(i in 1:nrow(df)){
df$lineage[i] = clusters$lineage[clusters$ID == df$tip[i]]
}
plot(df$distance ~ df$date, col = as.factor(df$lineage), pch =16)
lm = lm(df$distance ~ df$date)
abline(lm)
library(ggplot2)
library(RColorBrewer)
p2 = ggplot(data = df, aes(x = date, y = distance))  +
geom_point(aes(col = lineage)) +
stat_smooth(method="lm",fullrange=TRUE,se=F, col = "black")+
scale_color_brewer("Lineage", palette="Paired")+
ylab("root-to-tip distance") +
theme_bw()
p2+ annotate("text",
label = paste("x intercept =",prettyNum((coef(lm)[1] * -1)/coef(lm)[2])),
x = 2005, y = 0.016)
library(patchwork)
p_tanzania + p + p2
View(df)
df = read.table("input/pemba non timescaled.txt", header = T)
clusters = read.csv("input/Pemba_assignment.csv")
df = df[df$tip %in% clusters$ID,]
df$lineage = NA
df$location = NA
for(i in 1:nrow(df)){
df$lineage[i] = clusters$lineage[clusters$ID == df$tip[i]]
df$location[i] = strsplit(df$tip[i], '[!?._][[:space:]]*')[[1]][3]
}
View(df)
#Phylogenetic tree
tree = read.beast("../Pemba/data/genetic/pemba_tz_n153_timescaled.mcc.tre")
tipcolours = c()
for(i in 1:length(tree@phylo$tip.label)){
tipcolours[i] = df$lineage[df$tip == tree@phylo$tip.label[i]]
tree@phylo$tip.label[i] = strsplit(tree@phylo$tip.label[i], "_")[[1]][1]
}
d <- data.frame(node=1:(Nnode(tree)+length(tree@phylo$tip.label)),
location = c(tipcolours, rep("black", Nnode(tree))))
p = ggtree(tree, mrsd="2018-01-01") +
theme_tree2() +
#geom_tiplab(align=TRUE, linesize=.5, size = 3) +
xlim(1950, 2022)
p = p %<+% d  +
geom_tippoint(aes(color=location), size=3, alpha=1) +
scale_color_brewer("location", palette="Paired")
p
library(ggplo2)
library(maps)
library(scatterpie)
# generate dataset
set.seed(123)
long <- rnorm(50, sd=100)
lat <- rnorm(50, sd=50)
d <- data.frame(long=long, lat=lat)
d <- with(d, d[abs(long) < 150 & abs(lat) < 70,])
n <- nrow(d)
d$region <- factor(1:n)
d$A <- abs(rnorm(n, sd=1))
d$B <- abs(rnorm(n, sd=2))
d$C <- abs(rnorm(n, sd=3))
d$D <- abs(rnorm(n, sd=4))
d[1, 4:7] <- d[1, 4:7] * 3
head(d)
# plot
world <- map_data('world')
p <- ggplot(world, aes(long, lat)) +
geom_map(map=world, aes(map_id=region), fill=NA, color="black") +
coord_quickmap()
p + geom_scatterpie(aes(x=long, y=lat, group=region, r=radius),
data=d, cols=LETTERS[1:4], color=NA, alpha=.8) +
geom_scatterpie_legend(d$radius, x=-160, y=-55)
library(ggplot2)
library(maps)
install.packages("scatterpie")
install.packages("scatterpie")
devtools::install_github("GuangchuangYu/scatterpie")
R.Version()
install.packages(installr)
install.packages("installr")
library(installr)
updateR()
