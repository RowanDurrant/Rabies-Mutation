library(zoo)
gradeLevels = c("M", "D", "VD", "S", "HS", "MVS", "VS", "HVS", "E1", "E2")
dat = read.csv("C:/Users/User/Desktop/RowanDurrant_Logbook.csv")
dat1 = dat[dat$Style %in% c("2nd &beta;", "2nd", "Lead RP", "Lead Î²"),]
for(i in 1:nrow(dat1)){
dat1$GradeSplit[i] = strsplit(dat1$Grade[i], " ")[[1]][1]
}
dat1 = dat1[dat1$GradeSplit %in% gradeLevels,]
dat1$GradeSplit = factor(dat1$GradeSplit, levels = gradeLevels)
dat1$Date = as.Date(dat1$Date, format = "%d/%b/%y")
for(k in 1:nrow(dat1)){
if(dat1$Style[k] == "2nd &beta;" ||dat1$Style[k] ==  "2nd"){
dat1$AscentStyle[k] = "Second"
} else{dat1$AscentStyle[k] = "Lead"}
}
#Second
dat2 = dat1[dat1$AscentStyle == "Second",c(6,8,9)]
dat3 = data.frame(Date = seq.Date(
from = min(dat2$Date),
to = Sys.Date(),
by = "day"
), GradeSplit = "M", AscentStyle = "Second")
dat2 = rbind(dat2, dat3)
dat2 = dat2[order(as.Date(dat2$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat2)){
if(which(dat2$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat2$GradeSplit[j]
}
dat2$runningMax[j] = as.factor(runningMax)
}
#Lead
dat4 = dat1[dat1$AscentStyle == "Lead",c(6,8,9)]
dat5 = data.frame(Date = seq.Date(
from = min(dat4$Date),
to = Sys.Date(),
by = "day"
), GradeSplit = "M", AscentStyle = "Lead")
dat4 = rbind(dat4, dat5)
dat4 = dat4[order(as.Date(dat4$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat4)){
if(which(dat4$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat4$GradeSplit[j]
}
dat4$runningMax[j] = as.factor(runningMax)
}
dat6 = rbind(dat2, dat4)
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-1, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
gradeLevels = c("M", "D", "HVD", "VD", "S", "HS", "MVS", "VS", "HVS", "E1", "E2",
"E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10")
length(gradeLevels)
library(ggplot2)
library(zoo)
gradeLevels = c("M", "D", "HVD", "VD", "S", "HS", "MVS", "VS", "HVS", "E1", "E2",
"E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10")
dat = read.csv("C:/Users/User/Desktop/R Projects/UKC data/RowanDurrant_Logbook.csv")
dat1 = dat[dat$Style %in% c("2nd &beta;", "2nd", "Lead RP", "Lead Î²"),]
for(i in 1:nrow(dat1)){
dat1$GradeSplit[i] = strsplit(dat1$Grade[i], " ")[[1]][1]
}
dat1 = dat1[dat1$GradeSplit %in% gradeLevels,]
dat1$GradeSplit = factor(dat1$GradeSplit, levels = gradeLevels)
dat1$Date = as.Date(dat1$Date, format = "%d/%b/%y")
for(k in 1:nrow(dat1)){
if(dat1$Style[k] == "2nd &beta;" ||dat1$Style[k] ==  "2nd"){
dat1$AscentStyle[k] = "Second"
} else{dat1$AscentStyle[k] = "Lead"}
}
#Second
dat2 = dat1[dat1$AscentStyle == "Second",c(6,8,9)]
dat3 = data.frame(Date = seq.Date(
from = min(dat2$Date),
to = Sys.Date(),
by = "day"
), GradeSplit = "M", AscentStyle = "Second")
dat2 = rbind(dat2, dat3)
dat2 = dat2[order(as.Date(dat2$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat2)){
if(which(dat2$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat2$GradeSplit[j]
}
dat2$runningMax[j] = as.factor(runningMax)
}
#Lead
dat4 = dat1[dat1$AscentStyle == "Lead",c(6,8,9)]
dat5 = data.frame(Date = seq.Date(
from = min(dat4$Date),
to = Sys.Date(),
by = "day"
), GradeSplit = "M", AscentStyle = "Lead")
dat4 = rbind(dat4, dat5)
dat4 = dat4[order(as.Date(dat4$Date, format="%d/%m/%Y")),]
runningMax = "M"
for(j in 1:nrow(dat4)){
if(which(dat4$GradeSplit[j] == gradeLevels) > which(runningMax == gradeLevels)){
runningMax = dat4$GradeSplit[j]
}
dat4$runningMax[j] = as.factor(runningMax)
}
dat6 = rbind(dat2, dat4)
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-1, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
ggplot(dat1, aes(x=Date, y=GradeSplit, colour = AscentStyle)) +
geom_point(aes(x=Date, y=GradeSplit))+
geom_line(dat6, mapping = aes(x=Date, y=runningMax-2, group = AscentStyle, colour = AscentStyle)) +
scale_x_date(date_labels = "%d/%m/%y") +
labs(y = "British Trad Grade") +
theme_bw()
?rpois
library(devtools)
devtools::install_github("kathryncampbell/MADDOG", build_vignettes = TRUE, force = TRUE)
1= c(1,1,1,1,1,)
`1` = c(1,1,1,1,1,)
`1` = c(0,0,0,0,0,0,0,0,0,0)
df = data.frame(c(`1`, `2`, `3`))
`2` = c(0,0,0,0,0,0,0,0,0,0)
`3` = c(0,0,0,0,0,0,0,0,0,0)
df = data.frame(c(`1`, `2`, `3`))
print(df)
A = c(0,0,0,0,0,0,0,0,0,0)
B = c(0,0,0,0,0,0,0,0,0,0)
C = c(0,0,0,0,0,0,0,0,0,0)
df = data.frame(c(A,B,C))
print(df)
df
?data.frame
df = as.data.frame(rbind(c(A,B,C)))
df
df = as.data.frame(rbind(A,B,C))
df
A = c(0,0,0,0,0,0,0,0,0)
B = c(0,0,0,0,0,0,0,0,0)
C = c(0,0,0,0,0,0,0,0,0)
D = c(0,0,0,0,0,0,0,0,0)
E = c(0,0,0,0,0,0,0,0,0)
F = c(0,0,0,0,0,0,0,0,0)
G = c(0,0,0,0,0,0,0,0,0)
H = c(0,0,0,0,0,0,0,0,0)
I = c(0,0,0,0,0,0,0,0,0)
df = as.data.frame(rbind(A,B,C,D,E,F,G,H,I))
DF
df
clockrate = c(7.96E-04,
1.08E-04,
3.35E-05,
6.37E-05,
4.41E-04,
1.55E-04,
1.53E-04,
1.47E-04,
5.75E-04,
5.91E-05)
snpsPerGen = c(0.327,
0.126,
0.040,
0.111,
0.523,
0.178,
0.106,
0.138,
0.696,
0.081)
serialInterval = c(12.5,
35.56,
36,
53.17,
36.13,
35,
21,
28.54,
36.82,
41.62)
GSNPs = c(28,
10.5,
3.5,
8,
0,
9,
7,
4.33333,
54,
111)
plot(GSNPs ~ serialInterval)
plot(serialInterval ~ GSNPs)
plot(snpsPerGen ~ GSNPs)
plot(clockrate ~ GSNPs)
devtools::install_github("kathryncampbell/MADDOG", build_vignettes = TRUE, force = TRUE)
setwd("C:/Users/User/Documents/GitHub/Rabies-Mutation")
library(igraph)
library(readr)
library(ape)
source("code/mutations_function.R")
source("code/generations_calculation_function.R")
densities= read_csv("output/pemba/densities_2022.csv")
densities = densities[,2:ncol(densities)]
View(densities)
NoReps = 100
#alignment only- distance matrix based purely on genetic distance
all.fasta=read.dna("../Pemba/data/genetic/pemba_tz_n153.aln.fasta", format = 'fasta')
genomeLength = 11923
start1 = Sys.time()
source("code/2a_prep_phylo_trees.R")
source("code/3_main_calculations.R")
end1 = Sys.time()
end1 - start1
start1 = Sys.time()
source("code/2a_prep_phylo_trees.R")
source("code/3_main_calculations.R")
end1 = Sys.time()
end1 - start1
fullBootstraps2$TimeDiff[m]
##create serial interval -> generations probability density matrix
library(fitdistrplus)
SI_meanlog <- 2.85
SI_sdlog <-  0.966
n_missing <- 2500 # number of cases not seen
n_sim <- 1000 # number of simulations to try this on....
max_time = 50000
# prep vector to store distribution params for the range of n_missing
SI_conv_meanlog <- numeric(n_missing)
SI_conv_sdlog <- numeric(n_missing)
for(i in 1:n_missing){
# make a convolution of i serial intervals, replicate this n_sims times)
SI_conv_sims = replicate(n_sim, sum(rlnorm(i, meanlog = SI_meanlog, sdlog = SI_sdlog)))
SI_conv_fit <- fitdist(SI_conv_sims, "lnorm") # fit distribution to the new intervals
SI_conv_meanlog[i] <- SI_conv_fit$estimate["meanlog"]
SI_conv_sdlog[i] <- SI_conv_fit$estimate["sdlog"]
}
densities = setNames(data.frame(matrix(ncol = n_missing, nrow = max_time)), c("1":as.character(n_missing)))
for(i in 1:max_time){
densities[i,] = dlnorm(i, SI_conv_meanlog, sdlog = SI_conv_sdlog)
}
write.csv(densities, "output/densities_2022.csv")
install.packages("beepr")
library(beepr)
beep()
beep()
beep()
alnDist = read.csv("output/pemba/snpdistancesall.csv")
rownames(alnDist) <- alnDist[,1]
alnDist[,1] <- NULL
colnames(alnDist) = rownames(alnDist)
treeYearsUnpaired = read.csv("output/pemba/treeYearsUnpaired.csv")
treeYearsUnpaired = treeYearsUnpaired[,2:ncol(treeYearsUnpaired)]
tips = unique(treeYearsUnpaired$Desc[nchar(treeYearsUnpaired$Desc)>5])
#make network
g = graph.data.frame(treeYearsUnpaired, directed=F)
E(g)$length = treeYearsUnpaired$Branch.Length
fullBootstraps =  setNames(data.frame(matrix(ncol = 6, nrow = 0)),
c("Tip1", "Tip2", "TimeDiff","gens", "snpsPerGen",
"snpDist"))
for(j in 1:length(tips)){
for(k in 1:length(tips)){
if(k > j){
route = get.shortest.paths(g, tips[j], tips[k], output="epath")$epath[[1]] #path between two tips
timeDiff = sum(E(g)$length[route]) #time diff between two tips
fullBootstraps2 =  setNames(data.frame(matrix(ncol = 6, nrow = NoReps)),
c("Tip1", "Tip2", "TimeDiff","gens", "snpsPerGen",
"snpDist"))
for(m in 1:NoReps){
fullBootstraps2$Tip1[m] = tips[j]
fullBootstraps2$Tip2[m] = tips[k]
fullBootstraps2$TimeDiff[m] = timeDiff
fullBootstraps2$gens[m] = gencalc(fullBootstraps2$TimeDiff[m]) #time -> gens prediction
fullBootstraps2$snpDist[m] = alnDist[fullBootstraps2$Tip1[m], fullBootstraps2$Tip2[m]] * genomeLength
fullBootstraps2$snpsPerGen[m] = fullBootstraps2$snpDist[m] / fullBootstraps2$gens[m]
}
fullBootstraps = rbind(fullBootstraps, fullBootstraps2)
print(j)
}
}
}
write.csv(fullBootstraps, paste0("output/full_bootstraps_",NoReps,"_2022.csv"))
#FIGURE 4
tipDists = read.csv("output/pemba/full_bootstraps_100_2022.csv")
#FIGURE 4
tipDists = read.csv("output/pemba/full_bootstraps_100_2022.csv")
mean(tipDists$snpsPerGen)
CI(tipDists$snpsPerGen)
library(Rmisc)
CI(tipDists$snpsPerGen)
hist(tipDists$snpsPerGen)
hist(tipDists$snpsPerGen, bins =50)
hist(tipDists$snpsPerGen, breaks =50)
hist(tipDists$snpsPerGen, breaks =100)
hist(tipDists$snpsPerGen, breaks =500)
snps_predict = tipDists$snpsPerGen
runs = rep(NA, 1000)
snps_gamma = data.frame(shape = runs, rate = runs, aic = runs, LL = runs)
snps_lnorm = data.frame(meanlog = runs, sdlog = runs, aic = runs, LL = runs)
for (j in 1:length(runs)){ # for each run assign uncertainty to periods
# Fit distributions
snps_predict_gamma = fitdist(snps_predict[snps_predict>0], "gamma")
snps_gamma$shape[j] = snps_predict_gamma$estimate["shape"]
snps_gamma$rate[j] = snps_predict_gamma$estimate["rate"]
snps_gamma$aic[j] = snps_predict_gamma$aic
snps_gamma$LL[j] = snps_predict_gamma$loglik
snps_predict_lnorm = fitdist(snps_predict[snps_predict>0], "lnorm")
snps_lnorm$meanlog[j] = snps_predict_lnorm$estimate["meanlog"]
snps_lnorm$sdlog[j] = snps_predict_lnorm$estimate["sdlog"]
snps_lnorm$aic[j] = snps_predict_lnorm$aic
snps_lnorm$LL[j] = snps_predict_lnorm$loglik
print(j)
}
write.csv(snps_gamma, file = "output/pemba/snps_gamma.csv")
write.csv(snps_lnorm, file = "output/pemba/snps_lnorm.csv")
View(snps_gamma)
View(snps_lnorm)
param <- MASS::fitdistr(snps_predict[snps_predict>0], "gamma", lower=c(0,0))
param
param <- MASS::fitdistr(snps_predict[snps_predict>0], "lnorm", lower=c(0,0))
clockRates = read.csv("output/pemba/treeYearsUnpairedClockRate.csv")
clockRates$Clock.Rate.Weighted = clockRates$Clock.Rate * clockRates$Branch.Length
meanClockRate = sum(clockRates$Clock.Rate.Weighted)/sum(clockRates$Branch.Length)
meanClockRate*11923*(17.3/365)
SI_meanlog <- 2.85
SI_sdlog <-  0.966
max_time = 1:1000
curve = c()
for(i in max_time){
curve[i] = dlnorm(i, SI_meanlog, sdlog = SI_sdlog)
}
mutation_distr = c()
for(j in max_time){
mutation_time = meanClockRate*12000*(j/365)
weighted = rep(mutation_time, curve[j]/min(curve))
mutation_distr = append(mutation_distr, weighted)
}
runs = rep(NA, 10)
snps_gamma = data.frame(shape = runs, rate = runs, aic = runs, LL = runs)
snps_lnorm = data.frame(meanlog = runs, sdlog = runs, aic = runs, LL = runs)
for (j in 1:length(runs)){ # for each run assign uncertainty to periods
# Fit distributions
snps_predict_gamma = fitdist(mutation_distr, "gamma")
snps_gamma$shape[j] = snps_predict_gamma$estimate["shape"]
snps_gamma$rate[j] = snps_predict_gamma$estimate["rate"]
snps_gamma$aic[j] = snps_predict_gamma$aic
snps_gamma$LL[j] = snps_predict_gamma$loglik
snps_predict_lnorm = fitdist(mutation_distr, "lnorm")
snps_lnorm$meanlog[j] = snps_predict_lnorm$estimate["meanlog"]
snps_lnorm$sdlog[j] = snps_predict_lnorm$estimate["sdlog"]
snps_lnorm$aic[j] = snps_predict_lnorm$aic
snps_lnorm$LL[j] = snps_predict_lnorm$loglik
print(j)
}
View(snps_gamma)
View(snps_lnorm)
#FIGURE 4
tipDists = read.csv("output/pemba/full_bootstraps_100_2022.csv")
bw = 0.005
n_obs = sum(!is.na(tipDists$snpsPerGen))
ggplot(data = data.frame(x = c(0, 0.5)), aes(x)) +
geom_histogram(data= tipDists, aes(snpsPerGen), binwidth = bw, alpha=0.2, fill = "red")+
stat_function(fun = function(x)
dlnorm(x, meanlog =  -2.19029, sdlog = 0.9662017)* bw * n_obs, aes(colour = "Clock Rate Method"), size = 1.1) +
ylab("") +
xlab("SNPs per Generation")+
stat_function(fun= function(x)
dgamma(x, shape = 10.03098, rate = 59.26635)* bw * n_obs, aes(colour = "Novel Method"), size = 1.1) +
theme_bw() + xlim(0,0.5)+
scale_color_manual(name='Prediction Method',
values=c('Clock Rate Method'='blue', 'Novel Method'='red'))+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
library(ggplot2)
ggplot(data = data.frame(x = c(0, 0.5)), aes(x)) +
geom_histogram(data= tipDists, aes(snpsPerGen), binwidth = bw, alpha=0.2, fill = "red")+
stat_function(fun = function(x)
dlnorm(x, meanlog =  -2.19029, sdlog = 0.9662017)* bw * n_obs, aes(colour = "Clock Rate Method"), size = 1.1) +
ylab("") +
xlab("SNPs per Generation")+
stat_function(fun= function(x)
dgamma(x, shape = 10.03098, rate = 59.26635)* bw * n_obs, aes(colour = "Novel Method"), size = 1.1) +
theme_bw() + xlim(0,0.5)+
scale_color_manual(name='Prediction Method',
values=c('Clock Rate Method'='blue', 'Novel Method'='red'))+
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggsave("plots/figure 4 with hist 2022.png")
#FIGURE 5
tipDists = read.csv("output/pemba/full_bootstraps_100_2022.csv") #change if you changed no. reps
clusters = read.csv("input/Pemba_assignment.csv")
alnDist = read.csv("output/pemba/snpdistancesall.csv")
rownames(alnDist) <- alnDist[,1]
alnDist[,1] <- NULL
colnames(alnDist) = rownames(alnDist)
clusters = clusters[clusters$ID %in% rownames(alnDist),]
tipDists$TimeDiffYears = tipDists$TimeDiff / 365
tipDists$n = NA
lineages = unique(clusters$lineage)
lineageTipDists = head(tipDists, 0)
for(i in lineages){
if(nrow(clusters[clusters$lineage == i,]) > 1){
newLineage = tipDists[tipDists$Tip1 %in% clusters$ID[clusters$lineage == i] &
tipDists$Tip2 %in% clusters$ID[clusters$lineage == i],]
newLineage$Lineage = i
newLineage$n = nrow(clusters[clusters$lineage == i,])
lineageTipDists = rbind(lineageTipDists, newLineage)
# R program to find the confidence interval
# Calculate the mean and standard error
model <- lm(snpsPerGen ~ 1, newLineage)
# Find the confidence interval
conf95 = confint(model, level=0.95)
print(paste(i, nrow(clusters[clusters$lineage == i,]),
mean(newLineage$snpsPerGen), conf95[1], conf95[2]))
}
else{print(paste(i, nrow(clusters[clusters$lineage == i,])))}
}
ggplot(data = lineageTipDists, aes(x = snpsPerGen)) +
geom_density(alpha=.35, fill="#FF6666") +
xlim(0,0.75)+
facet_wrap(~ Lineage) +
geom_text(data = lineageTipDists,
mapping = aes(x = 0.6,
y = 20,
label = paste0("n = ", as.character(n))))+
theme_bw() +
ylab("Density") +
xlab("SNPs per Generation")+
geom_vline(xintercept = 0.17, lty = 2)
ggplot(data = lineageTipDists, aes(x = snpsPerGen)) +
geom_density(alpha=.35, fill="#FF6666") +
xlim(0,0.75)+
facet_wrap(~ Lineage) +
geom_text(data = lineageTipDists,
mapping = aes(x = 0.6,
y = 20,
label = paste0("n = ", as.character(n))))+
theme_bw() +
ylab("Density") +
xlab("SNPs per Generation")+
geom_vline(xintercept = 0.1690, lty = 2)
ggsave("plots/figure 5 vline updated 2022.png")
simTipDists = read.csv("output/simulation/full_bootstraps_sim_24_1.41666666666667e-05_166_150_timescaled.csv")
simTipDists$TimeDiffYears = simTipDists$TimeDiff / 365
p6 = ggplot(data = simTipDists, aes(y = snpsPerGen, x = TimeDiffYears)) +
geom_point(colour = "blue", alpha = .1) +
theme_bw() +
ylab("SNPs per Generation") + xlab("Temporal Distance (Years)") +
geom_hline(yintercept = 0.17) +
labs(title="A")
lineageNames = c("AF1b_A1",
"AF1b_A1.1.1",
"AF1b_A1.1.2",
"AF1b_B1",
"AF1b_B1.1",
"AF1b_B1.1.1",
"AF1b_B1.2",
"AF1b_B1.3",
"AF1b_C1")
names(lineageNames) = c("Cosmopolitan AF1b_A1",
"Cosmopolitan AF1b_A1.1.1",
"Cosmopolitan AF1b_A1.1.2",
"Cosmopolitan AF1b_B1",
"Cosmopolitan AF1b_B1.1",
"Cosmopolitan AF1b_B1.1.1",
"Cosmopolitan AF1b_B1.2",
"Cosmopolitan AF1b_B1.3",
"Cosmopolitan AF1b_C1")
p7 = ggplot(data = lineageTipDists, aes(x = TimeDiffYears, y = snpsPerGen)) +
geom_point(alpha=.35, colour = "red") +
# xlim(0,0.75)+
#geom_hline(aes(yintercept = mean(snpsPerGen)), lty = 2)+
facet_wrap(~ Lineage,
labeller = labeller(Lineage = lineageNames)) +
theme_bw() +
ylab("SNPs per Generation")+
xlab("Temporal Distance (Years)")+
labs(title = "B")
p6 + p7
library(patchwork)
p6 + p7
data = read.csv("output/simulation/simsampledtips_perGen_24_0.000166666666666667_124_621.7.csv")
library(stringr)
startSeq = paste(rep("a",12000), collapse = "")
data$divergence = NA
for(i in 1:nrow(data)){
data$divergence[i] = (nchar(startSeq) - str_count(data$sequence[i], "a"))/nchar(startSeq)
}
data$rate = data$divergence/data$infD
plot(data$divergence ~ data$infD, col = ifelse(data$rate > 8e-06, "red", "black"))
ridgepoints = data[data$rate > 7.75e-06,]
dataFull = read.csv("../Rabies-Mutation-Rates/output/simulation/simFullCases_perGen_24_0.000166666666666667_124.csv")
dataFull = dataFull[,2:ncol(dataFull)]
dataFull$from = as.character(dataFull$from)
dataFull$to = as.character(dataFull$to)
library(igraph)
g = graph.data.frame(dataFull, directed = F)
E(g)$length = dataFull$TimeDiff
E(g)$mode = "-"
plot(g,
vertex.color = ifelse(names(V(g)) %in% ridgepoints$caseID , adjustcolor("red", alpha.f = .6),adjustcolor("SkyBlue2", alpha.f = .25)),
vertex.label.color = adjustcolor("black", .05),
vertex.frame.color = adjustcolor("SkyBlue2", alpha.f = .6),
layout = layout_as_tree(g),
vertex.label = NA,
vertex.size = 2)
?rpois
hist(rpois(10000, 0.17))
